/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ContributorPool {
  export type ContributorStruct = {
    wallet: AddressLike;
    skillSet: string;
    totalContribution: BigNumberish;
    tokensEarned: BigNumberish;
    joinTimestamp: BigNumberish;
    isActive: boolean;
  };

  export type ContributorStructOutput = [
    wallet: string,
    skillSet: string,
    totalContribution: bigint,
    tokensEarned: bigint,
    joinTimestamp: bigint,
    isActive: boolean
  ] & {
    wallet: string;
    skillSet: string;
    totalContribution: bigint;
    tokensEarned: bigint;
    joinTimestamp: bigint;
    isActive: boolean;
  };
}

export interface ContributorPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_CONTRIBUTOR_POOL_PERCENTAGE"
      | "VESTING_PERIOD"
      | "allocateContributorTokens"
      | "claimVestedTokens"
      | "contributionWeights"
      | "contributorAddresses"
      | "contributors"
      | "getContributorDetails"
      | "owner"
      | "projectToken"
      | "recordContribution"
      | "registerContributor"
      | "renounceOwnership"
      | "totalContributorTokens"
      | "transferOwnership"
      | "updateContributionWeights"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContributionRecorded"
      | "ContributorRegistered"
      | "OwnershipTransferred"
      | "TokensAllocated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_CONTRIBUTOR_POOL_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VESTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocateContributorTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimVestedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributionWeights",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributorDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "projectToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordContribution",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerContributor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalContributorTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContributionWeights",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_CONTRIBUTOR_POOL_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VESTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateContributorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimVestedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributionWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributorDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerContributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalContributorTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContributionWeights",
    data: BytesLike
  ): Result;
}

export namespace ContributionRecordedEvent {
  export type InputTuple = [
    contributor: AddressLike,
    contributionValue: BigNumberish,
    contributionType: BigNumberish
  ];
  export type OutputTuple = [
    contributor: string,
    contributionValue: bigint,
    contributionType: bigint
  ];
  export interface OutputObject {
    contributor: string;
    contributionValue: bigint;
    contributionType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributorRegisteredEvent {
  export type InputTuple = [
    contributor: AddressLike,
    skillSet: string,
    primarySkill: BigNumberish
  ];
  export type OutputTuple = [
    contributor: string,
    skillSet: string,
    primarySkill: bigint
  ];
  export interface OutputObject {
    contributor: string;
    skillSet: string;
    primarySkill: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensAllocatedEvent {
  export type InputTuple = [
    contributor: AddressLike,
    tokenAmount: BigNumberish
  ];
  export type OutputTuple = [contributor: string, tokenAmount: bigint];
  export interface OutputObject {
    contributor: string;
    tokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ContributorPool extends BaseContract {
  connect(runner?: ContractRunner | null): ContributorPool;
  waitForDeployment(): Promise<this>;

  interface: ContributorPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_CONTRIBUTOR_POOL_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  VESTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  allocateContributorTokens: TypedContractMethod<[], [void], "nonpayable">;

  claimVestedTokens: TypedContractMethod<[], [void], "nonpayable">;

  contributionWeights: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  contributorAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  contributors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        wallet: string;
        skillSet: string;
        totalContribution: bigint;
        tokensEarned: bigint;
        joinTimestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getContributorDetails: TypedContractMethod<
    [_contributor: AddressLike],
    [ContributorPool.ContributorStructOutput],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  projectToken: TypedContractMethod<[], [string], "view">;

  recordContribution: TypedContractMethod<
    [
      _contributor: AddressLike,
      _contributionValue: BigNumberish,
      _contributionType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerContributor: TypedContractMethod<
    [_skillSet: string, _primarySkill: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalContributorTokens: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateContributionWeights: TypedContractMethod<
    [_type: BigNumberish, _newWeight: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_CONTRIBUTOR_POOL_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VESTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allocateContributorTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimVestedTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contributionWeights"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "contributorAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "contributors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        wallet: string;
        skillSet: string;
        totalContribution: bigint;
        tokensEarned: bigint;
        joinTimestamp: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContributorDetails"
  ): TypedContractMethod<
    [_contributor: AddressLike],
    [ContributorPool.ContributorStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "projectToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordContribution"
  ): TypedContractMethod<
    [
      _contributor: AddressLike,
      _contributionValue: BigNumberish,
      _contributionType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerContributor"
  ): TypedContractMethod<
    [_skillSet: string, _primarySkill: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalContributorTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateContributionWeights"
  ): TypedContractMethod<
    [_type: BigNumberish, _newWeight: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ContributionRecorded"
  ): TypedContractEvent<
    ContributionRecordedEvent.InputTuple,
    ContributionRecordedEvent.OutputTuple,
    ContributionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "ContributorRegistered"
  ): TypedContractEvent<
    ContributorRegisteredEvent.InputTuple,
    ContributorRegisteredEvent.OutputTuple,
    ContributorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokensAllocated"
  ): TypedContractEvent<
    TokensAllocatedEvent.InputTuple,
    TokensAllocatedEvent.OutputTuple,
    TokensAllocatedEvent.OutputObject
  >;

  filters: {
    "ContributionRecorded(address,uint256,uint8)": TypedContractEvent<
      ContributionRecordedEvent.InputTuple,
      ContributionRecordedEvent.OutputTuple,
      ContributionRecordedEvent.OutputObject
    >;
    ContributionRecorded: TypedContractEvent<
      ContributionRecordedEvent.InputTuple,
      ContributionRecordedEvent.OutputTuple,
      ContributionRecordedEvent.OutputObject
    >;

    "ContributorRegistered(address,string,uint8)": TypedContractEvent<
      ContributorRegisteredEvent.InputTuple,
      ContributorRegisteredEvent.OutputTuple,
      ContributorRegisteredEvent.OutputObject
    >;
    ContributorRegistered: TypedContractEvent<
      ContributorRegisteredEvent.InputTuple,
      ContributorRegisteredEvent.OutputTuple,
      ContributorRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokensAllocated(address,uint256)": TypedContractEvent<
      TokensAllocatedEvent.InputTuple,
      TokensAllocatedEvent.OutputTuple,
      TokensAllocatedEvent.OutputObject
    >;
    TokensAllocated: TypedContractEvent<
      TokensAllocatedEvent.InputTuple,
      TokensAllocatedEvent.OutputTuple,
      TokensAllocatedEvent.OutputObject
    >;
  };
}
