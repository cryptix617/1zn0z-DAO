/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CommunityDAO {
  export type LiquidityStakeStruct = {
    amount: BigNumberish;
    stakeTimestamp: BigNumberish;
    lastRedemptionTimestamp: BigNumberish;
  };

  export type LiquidityStakeStructOutput = [
    amount: bigint,
    stakeTimestamp: bigint,
    lastRedemptionTimestamp: bigint
  ] & {
    amount: bigint;
    stakeTimestamp: bigint;
    lastRedemptionTimestamp: bigint;
  };
}

export interface CommunityDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BRONZE_MEMBERSHIP_COST"
      | "EARLY_WITHDRAWAL_PENALTY"
      | "GOLD_MEMBERSHIP_COST"
      | "MAX_REDEMPTION_MULTIPLIER"
      | "MINIMUM_VOTE_THRESHOLD"
      | "REDEMPTION_COOLDOWN"
      | "SILVER_MEMBERSHIP_COST"
      | "VOTING_PERIOD"
      | "createProposal"
      | "daoLiquidityPool"
      | "daoTreasuryPool"
      | "executeProposal"
      | "finalizeTokenLaunch"
      | "getVotingPower"
      | "governanceToken"
      | "memberships"
      | "owner"
      | "proposalCount"
      | "proposals"
      | "proposeTokenLaunch"
      | "purchaseMembership"
      | "redeemLiquidity"
      | "renounceOwnership"
      | "tokenLaunchProposalCount"
      | "tokenLaunchProposals"
      | "transferOwnership"
      | "voteOnProposal"
      | "voteOnTokenLaunch"
      | "withdrawTreasuryFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LiquidityRedeemed"
      | "LiquidityStaked"
      | "MembershipPurchased"
      | "MembershipUpgraded"
      | "OwnershipTransferred"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "ProposalVoted"
      | "TokenLaunchProposalCreated"
      | "TokenLaunchProposalVoted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BRONZE_MEMBERSHIP_COST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EARLY_WITHDRAWAL_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOLD_MEMBERSHIP_COST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REDEMPTION_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_VOTE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEMPTION_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SILVER_MEMBERSHIP_COST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "daoLiquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoTreasuryPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeTokenLaunch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memberships",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTokenLaunch",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseMembership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLaunchProposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLaunchProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnProposal",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnTokenLaunch",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTreasuryFunds",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BRONZE_MEMBERSHIP_COST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EARLY_WITHDRAWAL_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOLD_MEMBERSHIP_COST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REDEMPTION_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_VOTE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEMPTION_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SILVER_MEMBERSHIP_COST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoTreasuryPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeTokenLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberships",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeTokenLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenLaunchProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenLaunchProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnTokenLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTreasuryFunds",
    data: BytesLike
  ): Result;
}

export namespace LiquidityRedeemedEvent {
  export type InputTuple = [
    member: AddressLike,
    originalAmount: BigNumberish,
    redeemedAmount: BigNumberish
  ];
  export type OutputTuple = [
    member: string,
    originalAmount: bigint,
    redeemedAmount: bigint
  ];
  export interface OutputObject {
    member: string;
    originalAmount: bigint;
    redeemedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityStakedEvent {
  export type InputTuple = [member: AddressLike, amount: BigNumberish];
  export type OutputTuple = [member: string, amount: bigint];
  export interface OutputObject {
    member: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MembershipPurchasedEvent {
  export type InputTuple = [
    member: AddressLike,
    level: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [member: string, level: bigint, amount: bigint];
  export interface OutputObject {
    member: string;
    level: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MembershipUpgradedEvent {
  export type InputTuple = [
    member: AddressLike,
    fromLevel: BigNumberish,
    toLevel: BigNumberish
  ];
  export type OutputTuple = [
    member: string,
    fromLevel: bigint,
    toLevel: bigint
  ];
  export interface OutputObject {
    member: string;
    fromLevel: bigint;
    toLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [proposalId: BigNumberish, proposer: AddressLike];
  export type OutputTuple = [proposalId: bigint, proposer: string];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalVotedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    support: boolean
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    support: boolean
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    support: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenLaunchProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    tokenName: string,
    proposer: AddressLike
  ];
  export type OutputTuple = [
    proposalId: bigint,
    tokenName: string,
    proposer: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    tokenName: string;
    proposer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenLaunchProposalVotedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    support: boolean
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    support: boolean
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    support: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CommunityDAO extends BaseContract {
  connect(runner?: ContractRunner | null): CommunityDAO;
  waitForDeployment(): Promise<this>;

  interface: CommunityDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BRONZE_MEMBERSHIP_COST: TypedContractMethod<[], [bigint], "view">;

  EARLY_WITHDRAWAL_PENALTY: TypedContractMethod<[], [bigint], "view">;

  GOLD_MEMBERSHIP_COST: TypedContractMethod<[], [bigint], "view">;

  MAX_REDEMPTION_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  MINIMUM_VOTE_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  REDEMPTION_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  SILVER_MEMBERSHIP_COST: TypedContractMethod<[], [bigint], "view">;

  VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  createProposal: TypedContractMethod<
    [_description: string],
    [void],
    "nonpayable"
  >;

  daoLiquidityPool: TypedContractMethod<[], [bigint], "view">;

  daoTreasuryPool: TypedContractMethod<[], [bigint], "view">;

  executeProposal: TypedContractMethod<
    [_proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  finalizeTokenLaunch: TypedContractMethod<
    [_proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getVotingPower: TypedContractMethod<[member: AddressLike], [bigint], "view">;

  governanceToken: TypedContractMethod<[], [string], "view">;

  memberships: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, CommunityDAO.LiquidityStakeStructOutput] & {
        level: bigint;
        joinTimestamp: bigint;
        totalContributed: bigint;
        liquidityStake: CommunityDAO.LiquidityStakeStructOutput;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        proposer: string;
        description: string;
        votesFor: bigint;
        votesAgainst: bigint;
        deadline: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  proposeTokenLaunch: TypedContractMethod<
    [_name: string, _symbol: string, _initialSupply: BigNumberish],
    [void],
    "nonpayable"
  >;

  purchaseMembership: TypedContractMethod<[], [void], "payable">;

  redeemLiquidity: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tokenLaunchProposalCount: TypedContractMethod<[], [bigint], "view">;

  tokenLaunchProposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        proposer: string;
        tokenName: string;
        tokenSymbol: string;
        initialSupply: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
        deadline: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  voteOnProposal: TypedContractMethod<
    [_proposalId: BigNumberish, _support: boolean],
    [void],
    "nonpayable"
  >;

  voteOnTokenLaunch: TypedContractMethod<
    [_proposalId: BigNumberish, _support: boolean],
    [void],
    "nonpayable"
  >;

  withdrawTreasuryFunds: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BRONZE_MEMBERSHIP_COST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EARLY_WITHDRAWAL_PENALTY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GOLD_MEMBERSHIP_COST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REDEMPTION_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_VOTE_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REDEMPTION_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SILVER_MEMBERSHIP_COST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<[_description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "daoLiquidityPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "daoTreasuryPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[_proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalizeTokenLaunch"
  ): TypedContractMethod<[_proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getVotingPower"
  ): TypedContractMethod<[member: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "governanceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "memberships"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, CommunityDAO.LiquidityStakeStructOutput] & {
        level: bigint;
        joinTimestamp: bigint;
        totalContributed: bigint;
        liquidityStake: CommunityDAO.LiquidityStakeStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, boolean] & {
        proposer: string;
        description: string;
        votesFor: bigint;
        votesAgainst: bigint;
        deadline: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposeTokenLaunch"
  ): TypedContractMethod<
    [_name: string, _symbol: string, _initialSupply: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "purchaseMembership"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "redeemLiquidity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenLaunchProposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenLaunchProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        proposer: string;
        tokenName: string;
        tokenSymbol: string;
        initialSupply: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
        deadline: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voteOnProposal"
  ): TypedContractMethod<
    [_proposalId: BigNumberish, _support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteOnTokenLaunch"
  ): TypedContractMethod<
    [_proposalId: BigNumberish, _support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTreasuryFunds"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LiquidityRedeemed"
  ): TypedContractEvent<
    LiquidityRedeemedEvent.InputTuple,
    LiquidityRedeemedEvent.OutputTuple,
    LiquidityRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityStaked"
  ): TypedContractEvent<
    LiquidityStakedEvent.InputTuple,
    LiquidityStakedEvent.OutputTuple,
    LiquidityStakedEvent.OutputObject
  >;
  getEvent(
    key: "MembershipPurchased"
  ): TypedContractEvent<
    MembershipPurchasedEvent.InputTuple,
    MembershipPurchasedEvent.OutputTuple,
    MembershipPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "MembershipUpgraded"
  ): TypedContractEvent<
    MembershipUpgradedEvent.InputTuple,
    MembershipUpgradedEvent.OutputTuple,
    MembershipUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalVoted"
  ): TypedContractEvent<
    ProposalVotedEvent.InputTuple,
    ProposalVotedEvent.OutputTuple,
    ProposalVotedEvent.OutputObject
  >;
  getEvent(
    key: "TokenLaunchProposalCreated"
  ): TypedContractEvent<
    TokenLaunchProposalCreatedEvent.InputTuple,
    TokenLaunchProposalCreatedEvent.OutputTuple,
    TokenLaunchProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenLaunchProposalVoted"
  ): TypedContractEvent<
    TokenLaunchProposalVotedEvent.InputTuple,
    TokenLaunchProposalVotedEvent.OutputTuple,
    TokenLaunchProposalVotedEvent.OutputObject
  >;

  filters: {
    "LiquidityRedeemed(address,uint256,uint256)": TypedContractEvent<
      LiquidityRedeemedEvent.InputTuple,
      LiquidityRedeemedEvent.OutputTuple,
      LiquidityRedeemedEvent.OutputObject
    >;
    LiquidityRedeemed: TypedContractEvent<
      LiquidityRedeemedEvent.InputTuple,
      LiquidityRedeemedEvent.OutputTuple,
      LiquidityRedeemedEvent.OutputObject
    >;

    "LiquidityStaked(address,uint256)": TypedContractEvent<
      LiquidityStakedEvent.InputTuple,
      LiquidityStakedEvent.OutputTuple,
      LiquidityStakedEvent.OutputObject
    >;
    LiquidityStaked: TypedContractEvent<
      LiquidityStakedEvent.InputTuple,
      LiquidityStakedEvent.OutputTuple,
      LiquidityStakedEvent.OutputObject
    >;

    "MembershipPurchased(address,uint8,uint256)": TypedContractEvent<
      MembershipPurchasedEvent.InputTuple,
      MembershipPurchasedEvent.OutputTuple,
      MembershipPurchasedEvent.OutputObject
    >;
    MembershipPurchased: TypedContractEvent<
      MembershipPurchasedEvent.InputTuple,
      MembershipPurchasedEvent.OutputTuple,
      MembershipPurchasedEvent.OutputObject
    >;

    "MembershipUpgraded(address,uint8,uint8)": TypedContractEvent<
      MembershipUpgradedEvent.InputTuple,
      MembershipUpgradedEvent.OutputTuple,
      MembershipUpgradedEvent.OutputObject
    >;
    MembershipUpgraded: TypedContractEvent<
      MembershipUpgradedEvent.InputTuple,
      MembershipUpgradedEvent.OutputTuple,
      MembershipUpgradedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalCreated(uint256,address)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "ProposalVoted(uint256,address,bool)": TypedContractEvent<
      ProposalVotedEvent.InputTuple,
      ProposalVotedEvent.OutputTuple,
      ProposalVotedEvent.OutputObject
    >;
    ProposalVoted: TypedContractEvent<
      ProposalVotedEvent.InputTuple,
      ProposalVotedEvent.OutputTuple,
      ProposalVotedEvent.OutputObject
    >;

    "TokenLaunchProposalCreated(uint256,string,address)": TypedContractEvent<
      TokenLaunchProposalCreatedEvent.InputTuple,
      TokenLaunchProposalCreatedEvent.OutputTuple,
      TokenLaunchProposalCreatedEvent.OutputObject
    >;
    TokenLaunchProposalCreated: TypedContractEvent<
      TokenLaunchProposalCreatedEvent.InputTuple,
      TokenLaunchProposalCreatedEvent.OutputTuple,
      TokenLaunchProposalCreatedEvent.OutputObject
    >;

    "TokenLaunchProposalVoted(uint256,address,bool)": TypedContractEvent<
      TokenLaunchProposalVotedEvent.InputTuple,
      TokenLaunchProposalVotedEvent.OutputTuple,
      TokenLaunchProposalVotedEvent.OutputObject
    >;
    TokenLaunchProposalVoted: TypedContractEvent<
      TokenLaunchProposalVotedEvent.InputTuple,
      TokenLaunchProposalVotedEvent.OutputTuple,
      TokenLaunchProposalVotedEvent.OutputObject
    >;
  };
}
