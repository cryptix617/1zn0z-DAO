/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ProgressiveDecentralizationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DECENTRALIZATION_THRESHOLD_1"
      | "DECENTRALIZATION_THRESHOLD_2"
      | "MULTISIG_THRESHOLD"
      | "addMultisigMember"
      | "currentStage"
      | "foundationMultisig"
      | "getCurrentGovernanceStage"
      | "governanceRights"
      | "governanceToken"
      | "isMultisigMember"
      | "owner"
      | "proposeGovernanceStageTransition"
      | "removeMultisigMember"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GovernanceStageChanged"
      | "MultisigMemberAdded"
      | "MultisigMemberRemoved"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DECENTRALIZATION_THRESHOLD_1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DECENTRALIZATION_THRESHOLD_2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MULTISIG_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMultisigMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "foundationMultisig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGovernanceStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceRights",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMultisigMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeGovernanceStageTransition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeMultisigMember",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DECENTRALIZATION_THRESHOLD_1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DECENTRALIZATION_THRESHOLD_2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MULTISIG_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMultisigMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foundationMultisig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGovernanceStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMultisigMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeGovernanceStageTransition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMultisigMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace GovernanceStageChangedEvent {
  export type InputTuple = [oldStage: BigNumberish, newStage: BigNumberish];
  export type OutputTuple = [oldStage: bigint, newStage: bigint];
  export interface OutputObject {
    oldStage: bigint;
    newStage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultisigMemberAddedEvent {
  export type InputTuple = [newMember: AddressLike];
  export type OutputTuple = [newMember: string];
  export interface OutputObject {
    newMember: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MultisigMemberRemovedEvent {
  export type InputTuple = [removedMember: AddressLike];
  export type OutputTuple = [removedMember: string];
  export interface OutputObject {
    removedMember: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProgressiveDecentralization extends BaseContract {
  connect(runner?: ContractRunner | null): ProgressiveDecentralization;
  waitForDeployment(): Promise<this>;

  interface: ProgressiveDecentralizationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DECENTRALIZATION_THRESHOLD_1: TypedContractMethod<[], [bigint], "view">;

  DECENTRALIZATION_THRESHOLD_2: TypedContractMethod<[], [bigint], "view">;

  MULTISIG_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  addMultisigMember: TypedContractMethod<
    [newMember: AddressLike],
    [void],
    "nonpayable"
  >;

  currentStage: TypedContractMethod<[], [bigint], "view">;

  foundationMultisig: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getCurrentGovernanceStage: TypedContractMethod<[], [bigint], "view">;

  governanceRights: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        proposalThreshold: bigint;
        votingWeight: bigint;
        canChangeStage: boolean;
      }
    ],
    "view"
  >;

  governanceToken: TypedContractMethod<[], [string], "view">;

  isMultisigMember: TypedContractMethod<
    [member: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proposeGovernanceStageTransition: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  removeMultisigMember: TypedContractMethod<
    [member: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DECENTRALIZATION_THRESHOLD_1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DECENTRALIZATION_THRESHOLD_2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MULTISIG_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addMultisigMember"
  ): TypedContractMethod<[newMember: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentStage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "foundationMultisig"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCurrentGovernanceStage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "governanceRights"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        proposalThreshold: bigint;
        votingWeight: bigint;
        canChangeStage: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "governanceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isMultisigMember"
  ): TypedContractMethod<[member: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposeGovernanceStageTransition"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeMultisigMember"
  ): TypedContractMethod<[member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "GovernanceStageChanged"
  ): TypedContractEvent<
    GovernanceStageChangedEvent.InputTuple,
    GovernanceStageChangedEvent.OutputTuple,
    GovernanceStageChangedEvent.OutputObject
  >;
  getEvent(
    key: "MultisigMemberAdded"
  ): TypedContractEvent<
    MultisigMemberAddedEvent.InputTuple,
    MultisigMemberAddedEvent.OutputTuple,
    MultisigMemberAddedEvent.OutputObject
  >;
  getEvent(
    key: "MultisigMemberRemoved"
  ): TypedContractEvent<
    MultisigMemberRemovedEvent.InputTuple,
    MultisigMemberRemovedEvent.OutputTuple,
    MultisigMemberRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "GovernanceStageChanged(uint8,uint8)": TypedContractEvent<
      GovernanceStageChangedEvent.InputTuple,
      GovernanceStageChangedEvent.OutputTuple,
      GovernanceStageChangedEvent.OutputObject
    >;
    GovernanceStageChanged: TypedContractEvent<
      GovernanceStageChangedEvent.InputTuple,
      GovernanceStageChangedEvent.OutputTuple,
      GovernanceStageChangedEvent.OutputObject
    >;

    "MultisigMemberAdded(address)": TypedContractEvent<
      MultisigMemberAddedEvent.InputTuple,
      MultisigMemberAddedEvent.OutputTuple,
      MultisigMemberAddedEvent.OutputObject
    >;
    MultisigMemberAdded: TypedContractEvent<
      MultisigMemberAddedEvent.InputTuple,
      MultisigMemberAddedEvent.OutputTuple,
      MultisigMemberAddedEvent.OutputObject
    >;

    "MultisigMemberRemoved(address)": TypedContractEvent<
      MultisigMemberRemovedEvent.InputTuple,
      MultisigMemberRemovedEvent.OutputTuple,
      MultisigMemberRemovedEvent.OutputObject
    >;
    MultisigMemberRemoved: TypedContractEvent<
      MultisigMemberRemovedEvent.InputTuple,
      MultisigMemberRemovedEvent.OutputTuple,
      MultisigMemberRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
