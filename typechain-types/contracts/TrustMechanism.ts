/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TrustMechanismInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_TREASURY_WITHDRAWAL_PERCENTAGE"
      | "MINIMUM_SIGNATURES_REQUIRED"
      | "REPORTING_FREQUENCY"
      | "addSigner"
      | "approvedSigners"
      | "confirmTransaction"
      | "confirmations"
      | "executeTransaction"
      | "financialReports"
      | "lastReportTimestamp"
      | "owner"
      | "proposeTransaction"
      | "removeSigner"
      | "renounceOwnership"
      | "submitFinancialReport"
      | "totalSigners"
      | "transactions"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FinancialReportSubmitted"
      | "OwnershipTransferred"
      | "SignerAdded"
      | "SignerRemoved"
      | "TransactionConfirmed"
      | "TransactionExecuted"
      | "TransactionProposed"
      | "TreasuryWithdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_TREASURY_WITHDRAWAL_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_SIGNATURES_REQUIRED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPORTING_FREQUENCY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedSigners",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "financialReports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastReportTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeTransaction",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitFinancialReport",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TREASURY_WITHDRAWAL_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_SIGNATURES_REQUIRED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPORTING_FREQUENCY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "financialReports",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastReportTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitFinancialReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FinancialReportSubmittedEvent {
  export type InputTuple = [
    reportId: BigNumberish,
    totalRevenue: BigNumberish,
    reportHash: string
  ];
  export type OutputTuple = [
    reportId: bigint,
    totalRevenue: bigint,
    reportHash: string
  ];
  export interface OutputObject {
    reportId: bigint;
    totalRevenue: bigint;
    reportHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerAddedEvent {
  export type InputTuple = [newSigner: AddressLike];
  export type OutputTuple = [newSigner: string];
  export interface OutputObject {
    newSigner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerRemovedEvent {
  export type InputTuple = [removedSigner: AddressLike];
  export type OutputTuple = [removedSigner: string];
  export interface OutputObject {
    removedSigner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionConfirmedEvent {
  export type InputTuple = [transactionId: BigNumberish, signer: AddressLike];
  export type OutputTuple = [transactionId: bigint, signer: string];
  export interface OutputObject {
    transactionId: bigint;
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutedEvent {
  export type InputTuple = [transactionId: BigNumberish];
  export type OutputTuple = [transactionId: bigint];
  export interface OutputObject {
    transactionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionProposedEvent {
  export type InputTuple = [
    transactionId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [transactionId: bigint, to: string, amount: bigint];
  export interface OutputObject {
    transactionId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryWithdrawalEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    purpose: string
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    purpose: string
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    purpose: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustMechanism extends BaseContract {
  connect(runner?: ContractRunner | null): TrustMechanism;
  waitForDeployment(): Promise<this>;

  interface: TrustMechanismInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_TREASURY_WITHDRAWAL_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  MINIMUM_SIGNATURES_REQUIRED: TypedContractMethod<[], [bigint], "view">;

  REPORTING_FREQUENCY: TypedContractMethod<[], [bigint], "view">;

  addSigner: TypedContractMethod<
    [newSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  approvedSigners: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  confirmTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmations: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  executeTransaction: TypedContractMethod<
    [transactionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  financialReports: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string] & {
        timestamp: bigint;
        totalRevenue: bigint;
        totalExpenses: bigint;
        liquidityPoolBalance: bigint;
        reportHash: string;
      }
    ],
    "view"
  >;

  lastReportTimestamp: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposeTransaction: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, purpose: string],
    [void],
    "nonpayable"
  >;

  removeSigner: TypedContractMethod<
    [signer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitFinancialReport: TypedContractMethod<
    [
      totalRevenue: BigNumberish,
      totalExpenses: BigNumberish,
      liquidityPoolBalance: BigNumberish,
      reportHash: string
    ],
    [void],
    "nonpayable"
  >;

  totalSigners: TypedContractMethod<[], [bigint], "view">;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint] & {
        to: string;
        amount: bigint;
        executed: boolean;
        confirmations: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_TREASURY_WITHDRAWAL_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_SIGNATURES_REQUIRED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REPORTING_FREQUENCY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addSigner"
  ): TypedContractMethod<[newSigner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedSigners"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "confirmTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmations"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[transactionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "financialReports"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string] & {
        timestamp: bigint;
        totalRevenue: bigint;
        totalExpenses: bigint;
        liquidityPoolBalance: bigint;
        reportHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastReportTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposeTransaction"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, purpose: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeSigner"
  ): TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitFinancialReport"
  ): TypedContractMethod<
    [
      totalRevenue: BigNumberish,
      totalExpenses: BigNumberish,
      liquidityPoolBalance: BigNumberish,
      reportHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSigners"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean, bigint] & {
        to: string;
        amount: bigint;
        executed: boolean;
        confirmations: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FinancialReportSubmitted"
  ): TypedContractEvent<
    FinancialReportSubmittedEvent.InputTuple,
    FinancialReportSubmittedEvent.OutputTuple,
    FinancialReportSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SignerAdded"
  ): TypedContractEvent<
    SignerAddedEvent.InputTuple,
    SignerAddedEvent.OutputTuple,
    SignerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SignerRemoved"
  ): TypedContractEvent<
    SignerRemovedEvent.InputTuple,
    SignerRemovedEvent.OutputTuple,
    SignerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionConfirmed"
  ): TypedContractEvent<
    TransactionConfirmedEvent.InputTuple,
    TransactionConfirmedEvent.OutputTuple,
    TransactionConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecuted"
  ): TypedContractEvent<
    TransactionExecutedEvent.InputTuple,
    TransactionExecutedEvent.OutputTuple,
    TransactionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionProposed"
  ): TypedContractEvent<
    TransactionProposedEvent.InputTuple,
    TransactionProposedEvent.OutputTuple,
    TransactionProposedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryWithdrawal"
  ): TypedContractEvent<
    TreasuryWithdrawalEvent.InputTuple,
    TreasuryWithdrawalEvent.OutputTuple,
    TreasuryWithdrawalEvent.OutputObject
  >;

  filters: {
    "FinancialReportSubmitted(uint256,uint256,string)": TypedContractEvent<
      FinancialReportSubmittedEvent.InputTuple,
      FinancialReportSubmittedEvent.OutputTuple,
      FinancialReportSubmittedEvent.OutputObject
    >;
    FinancialReportSubmitted: TypedContractEvent<
      FinancialReportSubmittedEvent.InputTuple,
      FinancialReportSubmittedEvent.OutputTuple,
      FinancialReportSubmittedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SignerAdded(address)": TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;
    SignerAdded: TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;

    "SignerRemoved(address)": TypedContractEvent<
      SignerRemovedEvent.InputTuple,
      SignerRemovedEvent.OutputTuple,
      SignerRemovedEvent.OutputObject
    >;
    SignerRemoved: TypedContractEvent<
      SignerRemovedEvent.InputTuple,
      SignerRemovedEvent.OutputTuple,
      SignerRemovedEvent.OutputObject
    >;

    "TransactionConfirmed(uint256,address)": TypedContractEvent<
      TransactionConfirmedEvent.InputTuple,
      TransactionConfirmedEvent.OutputTuple,
      TransactionConfirmedEvent.OutputObject
    >;
    TransactionConfirmed: TypedContractEvent<
      TransactionConfirmedEvent.InputTuple,
      TransactionConfirmedEvent.OutputTuple,
      TransactionConfirmedEvent.OutputObject
    >;

    "TransactionExecuted(uint256)": TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;
    TransactionExecuted: TypedContractEvent<
      TransactionExecutedEvent.InputTuple,
      TransactionExecutedEvent.OutputTuple,
      TransactionExecutedEvent.OutputObject
    >;

    "TransactionProposed(uint256,address,uint256)": TypedContractEvent<
      TransactionProposedEvent.InputTuple,
      TransactionProposedEvent.OutputTuple,
      TransactionProposedEvent.OutputObject
    >;
    TransactionProposed: TypedContractEvent<
      TransactionProposedEvent.InputTuple,
      TransactionProposedEvent.OutputTuple,
      TransactionProposedEvent.OutputObject
    >;

    "TreasuryWithdrawal(address,uint256,string)": TypedContractEvent<
      TreasuryWithdrawalEvent.InputTuple,
      TreasuryWithdrawalEvent.OutputTuple,
      TreasuryWithdrawalEvent.OutputObject
    >;
    TreasuryWithdrawal: TypedContractEvent<
      TreasuryWithdrawalEvent.InputTuple,
      TreasuryWithdrawalEvent.OutputTuple,
      TreasuryWithdrawalEvent.OutputObject
    >;
  };
}
