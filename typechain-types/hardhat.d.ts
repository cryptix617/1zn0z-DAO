/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ZnozToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZnozToken__factory>;
    getContractFactory(
      name: "CommunityDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CommunityDAO__factory>;
    getContractFactory(
      name: "ContributionTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContributionTracker__factory>;
    getContractFactory(
      name: "ContributorPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContributorPool__factory>;
    getContractFactory(
      name: "DAOEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DAOEngine__factory>;
    getContractFactory(
      name: "ProgressiveDecentralization",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProgressiveDecentralization__factory>;
    getContractFactory(
      name: "TrustMechanism",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TrustMechanism__factory>;

    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ZnozToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZnozToken>;
    getContractAt(
      name: "CommunityDAO",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CommunityDAO>;
    getContractAt(
      name: "ContributionTracker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContributionTracker>;
    getContractAt(
      name: "ContributorPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContributorPool>;
    getContractAt(
      name: "DAOEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DAOEngine>;
    getContractAt(
      name: "ProgressiveDecentralization",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProgressiveDecentralization>;
    getContractAt(
      name: "TrustMechanism",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TrustMechanism>;

    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ZnozToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZnozToken>;
    deployContract(
      name: "CommunityDAO",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CommunityDAO>;
    deployContract(
      name: "ContributionTracker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContributionTracker>;
    deployContract(
      name: "ContributorPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContributorPool>;
    deployContract(
      name: "DAOEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DAOEngine>;
    deployContract(
      name: "ProgressiveDecentralization",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProgressiveDecentralization>;
    deployContract(
      name: "TrustMechanism",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TrustMechanism>;

    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ZnozToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZnozToken>;
    deployContract(
      name: "CommunityDAO",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CommunityDAO>;
    deployContract(
      name: "ContributionTracker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContributionTracker>;
    deployContract(
      name: "ContributorPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContributorPool>;
    deployContract(
      name: "DAOEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DAOEngine>;
    deployContract(
      name: "ProgressiveDecentralization",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProgressiveDecentralization>;
    deployContract(
      name: "TrustMechanism",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TrustMechanism>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
